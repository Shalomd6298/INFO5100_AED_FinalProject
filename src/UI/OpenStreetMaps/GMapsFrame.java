package UI.OpenStreetMaps;


import Business.EcoSystem;
import Business.Network;
import Business.RealEstate.Property;
import Business.User.User;
import Business.User.UserDirectory;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.event.MouseInputListener;
import org.jxmapviewer.JXMapViewer;
import org.jxmapviewer.OSMTileFactoryInfo;
import org.jxmapviewer.input.PanMouseInputListener;
import org.jxmapviewer.input.ZoomMouseWheelListenerCenter;
import org.jxmapviewer.viewer.DefaultTileFactory;
import org.jxmapviewer.viewer.GeoPosition;
import org.jxmapviewer.viewer.TileFactoryInfo;
import org.jxmapviewer.viewer.WaypointPainter;
import waypoint.EventWaypoint;
import waypoint.MyWaypoint;
import waypoint.WaypointRender;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


public class GMapsFrame extends javax.swing.JFrame {

    /**
     * Creates new form mainJFrame
     */
    
    private final Set<MyWaypoint> waypoints = new HashSet<>();
        
    private EventWaypoint event;
    static GMapsFrame gMapsJFrame;
    public double latitude;
    public double longitude;
    public String address;
    private Property property;
    
    String response;
    

    public GMapsFrame(Property property) {
        initComponents();
        this.setVisible(true);
        init();
        this.property = property;
        
        this.address = this.property.getAddress();
        this.latitude = this.property.getLatitude();
        this.longitude = this.property.getLongitude();
        
        this.response = response;
        
    }
    
//    public GMapsFrame(GMapsFrame gMapsJFrame, Property property) {
//        
//        this.gMapsJFrame = gMapsJFrame;
//        this.response = response;
//        
//        this.property = property;
//        
//        this.address = this.property.getAddress();
//        this.latitude = this.property.getLatitude();
//        this.longitude = this.property.getLongitude();
//        
//
//    } 
       
    private void init() {
        TileFactoryInfo info = new OSMTileFactoryInfo();
        DefaultTileFactory tileFactory = new DefaultTileFactory(info);
        
        JXMapViewer mapViewer = new JXMapViewer();
        
        jXMapViewer.setTileFactory(tileFactory);
        GeoPosition geo = new GeoPosition(42.361145, -71.057083);  // setting coordinates for boston area as default
        

        jXMapViewer.setAddressLocation(geo);
        jXMapViewer.setZoom(3);

        //  Create event mouse move
        MouseInputListener mm = new PanMouseInputListener(jXMapViewer);
        jXMapViewer.addMouseListener(mm);
        jXMapViewer.addMouseMotionListener(mm);
        jXMapViewer.addMouseWheelListener(new ZoomMouseWheelListenerCenter(jXMapViewer));



    }
    
    private void addWaypoint(MyWaypoint waypoint) {
        for (MyWaypoint d : waypoints) {
            jXMapViewer.remove(d.getButton());
        }
        waypoints.add(waypoint);
        initWaypoint();
    }
    
    private void initWaypoint() {
        WaypointPainter<MyWaypoint> wp = new WaypointRender();
        wp.setWaypoints(waypoints);
        jXMapViewer.setOverlayPainter(wp);
        for (MyWaypoint d : waypoints) {
            jXMapViewer.add(d.getButton());
        }
    }

    private void clearWaypoint() {
        for (MyWaypoint d : waypoints) {
            jXMapViewer.remove(d.getButton());
        }
        waypoints.clear();
        initWaypoint();
    }

    private EventWaypoint getEvent() {
        return new EventWaypoint() {
            @Override
            public void selected(MyWaypoint waypoint) {
                JOptionPane.showMessageDialog(null, "GMAPS");
            }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXMapViewer = new org.jxmapviewer.JXMapViewer();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        labelText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Return");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View Property and neighborhood within 1 mile radius ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jXMapViewerLayout = new javax.swing.GroupLayout(jXMapViewer);
        jXMapViewer.setLayout(jXMapViewerLayout);
        jXMapViewerLayout.setHorizontalGroup(
            jXMapViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXMapViewerLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jButton2)
                .addGap(57, 57, 57)
                .addComponent(jButton1)
                .addGap(117, 117, 117)
                .addComponent(labelText, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jXMapViewerLayout.setVerticalGroup(
            jXMapViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXMapViewerLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jXMapViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(labelText, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(538, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jXMapViewer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jXMapViewer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        String image_type = "pin";
        addWaypoint(new MyWaypoint(this.address, event, new GeoPosition(this.latitude, this.longitude), this.address, image_type));
        
                    
        String lat = String.valueOf(this.latitude);
        String longt = String.valueOf(this.longitude);                               
        String apikey = "UMgF7ZjU93iMPv1a3oFjvSVXNMgMVGPM";
        
        try {

//            String searchTerms = "grocery";  
//            String urlString = "https://nominatim.openstreetmap.org/reverse?format=json&lat=" + lat + "&lon=" + longt + "&zoom=18&addressdetails=1&accept-language=en&email=" + apikey;
//            String url = "https://nominatim.openstreetmap.org/search?format=json&q=" + searchTerms + "&lat=" + lat + "&lon=" + longt + "&key=" + apikey;

            // below is the URL for university waypoints around the pinned location
            String mapQuestURL = "https://www.mapquestapi.com/search/v2/radius?origin=" + lat + ",+" + longt + "&radius=1&maxMatches=3&ambiguities=ignore&hostedData=mqap.ntpois|group_sic_code=?|822101&outFormat=json&key=" + apikey;
//
//            System.out.println(mapQuestURL);
                        
            URL uRL = new URL(mapQuestURL);

            
            HttpURLConnection conn = (HttpURLConnection) uRL.openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Accept", "application/json");
            
            Scanner scanner = new Scanner(conn.getInputStream());
            this.response = scanner.useDelimiter("\\A").next();
            
//            System.out.println("\nresponse \n" + response);
            
            
            // Parse the JSON string into a JsonNode object
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode rootNode = objectMapper.readTree(response);

            // Get the searchResults array from the JSON
            JsonNode searchResults = rootNode.path("searchResults");
            
            // Iterate over the searchResults array and extract the name and coordinates for each university
            for (JsonNode result : searchResults) {
                
                image_type = "university";
                
                String name = result.path("fields").path("name").asText();
                double lati = result.path("fields").path("lat").asDouble();
                double longi = result.path("fields").path("lng").asDouble();

//                System.out.println("RESULT: " + name + ": " + lat + ", " + lati);
                addWaypoint(new MyWaypoint(name, event, new GeoPosition(lati, longi), this.address, image_type));
            } 
            
            scanner.close();
        } catch (Exception e) {
            e.printStackTrace();
        } 
        
        try {
          
            // below is the URL for hospital waypoints around the pinned location
            String mapQuestURL = "https://www.mapquestapi.com/search/v2/radius?origin=" + lat + ",+" + longt + "&radius=1&maxMatches=3&ambiguities=ignore&hostedData=mqap.ntpois|group_sic_code=?|806202&outFormat=json&key=" + apikey;
//
//            System.out.println(mapQuestURL);
                        
            URL uRL = new URL(mapQuestURL);

            
            HttpURLConnection conn = (HttpURLConnection) uRL.openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Accept", "application/json");
            
            Scanner scanner = new Scanner(conn.getInputStream());
            this.response = scanner.useDelimiter("\\A").next();
            
            
            // Parse the JSON string into a JsonNode object
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode rootNode = objectMapper.readTree(response);

            // Get the searchResults array from the JSON
            JsonNode searchResults = rootNode.path("searchResults");
            
            // Iterate over the searchResults array and extract the name and coordinates for each university
            for (JsonNode result : searchResults) {
                
                image_type = "hospital";
                
                String name = result.path("fields").path("name").asText();
                double lati = result.path("fields").path("lat").asDouble();
                double longi = result.path("fields").path("lng").asDouble();

                addWaypoint(new MyWaypoint(name, event, new GeoPosition(lati, longi), this.address, image_type));
            } 
            
            scanner.close();
        } catch (Exception e) {
            e.printStackTrace();
        }     
      
        
//        for(Property p : this.network.getPropertyDirectory().getProperties()){
//            System.out.println(p.getID() + p.getLatitude() + p.getLongitude());
//            addWaypoint(new MyWaypoint(p.getID(), event, new GeoPosition(p.getLatitude(), p.getLongitude()), p.getPrice()));           
//        }

       
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        clearWaypoint();
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GMapsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GMapsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GMapsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GMapsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new GMapsFrame().setVisible(true);
  
      }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private org.jxmapviewer.JXMapViewer jXMapViewer;
    private javax.swing.JLabel labelText;
    // End of variables declaration//GEN-END:variables
}

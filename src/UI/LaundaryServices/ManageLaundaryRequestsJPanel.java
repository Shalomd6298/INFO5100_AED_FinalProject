/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.LaundaryServices;

import Business.Customer.CustomerBilling;
import Business.EcoSystem;
import Business.Network;
import Business.User.User;
import Business.User.UserDirectory;
import Business.WorkRequest.LaundryWorkRequest;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import java.awt.Color;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;


public class ManageLaundaryRequestsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form manageLaundaryRequests
     */
    private EcoSystem ecosystem;
    private Network network;
    private User user;
    private UserDirectory userDirectory;
    
    public ManageLaundaryRequestsJPanel() {
        initComponents();
        
        this.ecosystem = this.ecosystem.getInstance();
        this.network = this.ecosystem.getNetwork();
        this.userDirectory = this.network.getUserDirectory();
    }

    public ManageLaundaryRequestsJPanel(EcoSystem ecosystem, User user) {
        initComponents();
        this.setVisible(true);

        this.user = user;
        this.ecosystem = ecosystem;
        this.userDirectory = this.ecosystem.getNetwork().getUserDirectory();
        this.network = this.ecosystem.getNetwork();
        
        populateLaundryRequestTable();
        formatRows();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void populateLaundryRequestTable() {
        ArrayList<LaundryWorkRequest> pendingLaundryRequest = new ArrayList<LaundryWorkRequest>();
        ArrayList<LaundryWorkRequest> non_pendingLaundryRequest = new ArrayList<LaundryWorkRequest>();

        for (LaundryWorkRequest laundryWRequest : network.getLaundaryworkrequestdirectory().getLaundryWorkRequestList()) {
            if (laundryWRequest.getStatus().equals("Pending")) {
                pendingLaundryRequest.add(laundryWRequest);
            } else {
                non_pendingLaundryRequest.add(laundryWRequest);
            }
        }

        populate_based_on_status(pendingLaundryRequest, non_pendingLaundryRequest);
    }

    public void populate_based_on_status(ArrayList<LaundryWorkRequest> pendingLaundryRequest, ArrayList<LaundryWorkRequest> non_pendingLaundryRequest) {
        DefaultTableModel model = (DefaultTableModel) tblLaundryRequests.getModel();
        model.setRowCount(0);
        for (LaundryWorkRequest laundryWRequest : pendingLaundryRequest) {

            Object[] newRow = new Object[5];
            newRow[0] = laundryWRequest;
            newRow[1] = laundryWRequest.getLaundryDetails().getCategory();
            newRow[2] = laundryWRequest.getLaundryDetails().getPrice();
            newRow[3] = laundryWRequest.getNumberOfClothes();
            newRow[4] = laundryWRequest.getStatus();

            model.addRow(newRow);
        }

        DefaultTableModel modelNon_Pending = (DefaultTableModel) tblLaundryConfirmed.getModel();
        modelNon_Pending.setRowCount(0);
        for (LaundryWorkRequest laundryWRequest : non_pendingLaundryRequest) {

             Object[] newRow = new Object[6];
            newRow[0] = laundryWRequest;
            newRow[1] = laundryWRequest.getLaundryDetails().getCategory();
            newRow[2] = laundryWRequest.getLaundryDetails().getPrice();
            newRow[3] = laundryWRequest.getNumberOfClothes();
            newRow[4] = laundryWRequest.getStatus();

            modelNon_Pending.addRow(newRow);
        }
    }
    
    public void updateWorkRequestStatus(LaundryWorkRequest selectedLaundry, String status) {
        selectedLaundry.setStatus(status);
        int index = 0;
        for (LaundryWorkRequest laundryWRequest : network.getLaundaryworkrequestdirectory().getLaundryWorkRequestList()) {
            if (laundryWRequest.getUserId().equals(selectedLaundry.getUserId())) {
                network.getLaundaryworkrequestdirectory().updateLaundryWorkRequest(laundryWRequest, index);
                break;
            }
            index++;
        }
    }
    
    private void formatRows() {

        DefaultTableModel model = (DefaultTableModel) tblLaundryConfirmed.getModel();

        tblLaundryConfirmed.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                String status = String.valueOf(model.getValueAt(row, 4));
                c.setBackground(status.equals("Pending") ? Color.WHITE : status.equals("Approved") ? Color.GREEN : Color.RED);
                return c;
            }
        });

    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblLaundryRequests = new javax.swing.JTable();
        btnApprove = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblLaundryConfirmed = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(41, 67, 138));
        jLabel1.setText("Laundry Plan Requests");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, -1, 20));

        tblLaundryRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "User ID", "Laundry Category", "Price", "No. of Clothes", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblLaundryRequests);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 920, 140));

        btnApprove.setBackground(new java.awt.Color(41, 67, 138));
        btnApprove.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnApprove.setForeground(new java.awt.Color(255, 255, 255));
        btnApprove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/accept.png"))); // NOI18N
        btnApprove.setText("Approve");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });
        add(btnApprove, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 290, 120, 40));

        btnReject.setBackground(new java.awt.Color(41, 67, 138));
        btnReject.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnReject.setForeground(new java.awt.Color(255, 255, 255));
        btnReject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.png"))); // NOI18N
        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });
        add(btnReject, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 350, 120, 40));

        tblLaundryConfirmed.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "User ID", "Laundry Category", "Price", "No. of Clothes", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblLaundryConfirmed);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 490, 920, 160));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/laundry-2.jpg"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 190, 720, 320));
    }// </editor-fold>//GEN-END:initComponents

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // TODO add your handling code here:
        try {
            int selectedRowIndex = tblLaundryRequests.getSelectedRow();
            if (selectedRowIndex < 0) {
                JOptionPane.showMessageDialog(this, "Please select a row to approve.");
                return;
            }
            DefaultTableModel model = (DefaultTableModel) tblLaundryRequests.getModel();
            LaundryWorkRequest selectedLaundryWorkRequest = (LaundryWorkRequest) model.getValueAt(selectedRowIndex, 0);
            updateWorkRequestStatus(selectedLaundryWorkRequest, "Approved");
            
            
            CustomerBilling ct = new CustomerBilling();

            //User definition for email notif
            User getUser = network.getUserDirectory().getUserById(selectedLaundryWorkRequest.getUserId());

            float laundrybooking_finalprice = selectedLaundryWorkRequest.getNumberOfClothes() * selectedLaundryWorkRequest.getLaundryDetails().getPrice();
            ct.setUserId(selectedLaundryWorkRequest.getUserId());
            ct.setFacilityUsed("Laundry Booked for category - " + selectedLaundryWorkRequest.getLaundryDetails().getCategory() + " for " + selectedLaundryWorkRequest.getNumberOfClothes() + " clothes");
            ct.setPrice(laundrybooking_finalprice);
            network.getCustomerbillingdirectory().addCustomerBilling(ct);

            //email notification
            //new EmailNotification().SendEmailOfNotification(getUser, "Laundry");

            JOptionPane.showMessageDialog(this, "Request approved successfully and email notification sent");
            populateLaundryRequestTable();
            formatRows();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
        try {
            int selectedRowIndex = tblLaundryRequests.getSelectedRow();
            if (selectedRowIndex < 0) {
                JOptionPane.showMessageDialog(this, "Please select a row to approve.");
                return;
            }
            DefaultTableModel model = (DefaultTableModel) tblLaundryRequests.getModel();
            LaundryWorkRequest selectedLaundryWorkRequest = (LaundryWorkRequest) model.getValueAt(selectedRowIndex, 0);
            updateWorkRequestStatus(selectedLaundryWorkRequest, "Rejected");
            JOptionPane.showMessageDialog(this, "Request rejected successfully");
            populateLaundryRequestTable();
            formatRows();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_btnRejectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnReject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblLaundryConfirmed;
    private javax.swing.JTable tblLaundryRequests;
    // End of variables declaration//GEN-END:variables
}

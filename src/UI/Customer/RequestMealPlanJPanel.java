/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.Customer;

import Business.Canteen.MealPlan;
import Business.Customer.Customer;
import Business.EcoSystem;
import Business.Network;
import Business.PropertyManagement.ServiceRequest;
import Business.User.User;
import Business.User.UserDirectory;
import Business.WorkRequest.MealPlanWorkRequest;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.MutableComboBoxModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;



public class RequestMealPlanJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RequestMealPlanJPanel
     */
    private EcoSystem ecosystem;
    private Network network;
    private User user;
    private UserDirectory userDirectory;
    ArrayList<MealPlan> foodOrderList;
    DefaultTableModel tableModel; 
    
    public RequestMealPlanJPanel() {
        initComponents();
        
        this.ecosystem = this.ecosystem.getInstance();
        this.network = this.ecosystem.getNetwork();
        this.userDirectory = this.network.getUserDirectory();
    }
    
    public RequestMealPlanJPanel(EcoSystem ecosystem, User user) {
        initComponents();
        this.setVisible(true);

        foodOrderList = new ArrayList<MealPlan>();
        
        this.user = user;
        this.ecosystem = ecosystem;
        this.userDirectory = this.ecosystem.getNetwork().getUserDirectory();
        this.network = this.ecosystem.getNetwork();
        
        MutableComboBoxModel<String> model = new DefaultComboBoxModel<String>();
        //this.tableModel = (DefaultTableModel) jTable1.getModel();
        Customer cust = this.network.getCustomerDirectory().findCustomer(user.getUserId());
        
        for (MealPlan itemList : network.getMealPlanDirectory().getMealPlanDirectory()) {
            model.addElement(itemList.getMealName());
        }
        
        chooseFoodDropdown.setModel(model);

        itemNameTxt.setEditable(false);
        itemCategoryTxt.setEditable(false);
        itemPriceTxt.setEditable(false);
        
        populateRequestTable();
        formatRows();
        //showMealPlans();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    private void populateRequestTable() {

        try {
            DefaultTableModel model = (DefaultTableModel) orderStatusTable.getModel();
            model.setRowCount(0);

            for (MealPlanWorkRequest fbWorkRequest : network.getMealPlanworkreqDirectory().getMealPlanWorkRequestList()) {

                String itemsList = "";
                float orderPrice = 0;
                if (fbWorkRequest.getUserId().equals(user.getUserId())) {

                    for (MealPlan item : fbWorkRequest.getMealPlanDetails()) {
                        itemsList += item.getMealName() + ", ";
                        orderPrice += item.getPrice();
                    }

                    Object[] newRow = new Object[3];
                    newRow[0] = itemsList;
                    newRow[1] = orderPrice;
                    newRow[2] = fbWorkRequest.getStatus();

                    model.addRow(newRow);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void clearFields() {
        
        itemNameTxt.setText("");
        itemPriceTxt.setText("");
        itemCategoryTxt.setText("");
        
    }
    
    private void formatRows() {

        DefaultTableModel model = (DefaultTableModel) orderStatusTable.getModel();

        orderStatusTable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                String status = String.valueOf(model.getValueAt(row, 2));
                c.setBackground(status.equals("Pending") ? Color.WHITE : status.equals("Approved") ? Color.GREEN : Color.RED);
                return c;
            }
        });

    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        chooseFoodDropdown = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        itemNameTxt = new javax.swing.JTextField();
        viewDetailsBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        itemCategoryTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        itemPriceTxt = new javax.swing.JTextField();
        addItemBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemListTable = new javax.swing.JTable();
        bookOrderBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderStatusTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        removeItemBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);

        jLabel1.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(41, 67, 138));
        jLabel1.setText("Book Food & Beverages");
        add(jLabel1);
        jLabel1.setBounds(390, 20, 270, 19);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(41, 67, 138));
        jLabel2.setText("Select Meal Plans");
        add(jLabel2);
        jLabel2.setBounds(110, 60, 130, 16);

        chooseFoodDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFoodDropdownActionPerformed(evt);
            }
        });
        add(chooseFoodDropdown);
        chooseFoodDropdown.setBounds(110, 80, 130, 30);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(41, 67, 138));
        jLabel3.setText("Item Name:");
        add(jLabel3);
        jLabel3.setBounds(290, 60, 130, 16);
        add(itemNameTxt);
        itemNameTxt.setBounds(290, 80, 150, 30);

        viewDetailsBtn.setBackground(new java.awt.Color(41, 67, 138));
        viewDetailsBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        viewDetailsBtn.setForeground(new java.awt.Color(255, 255, 255));
        viewDetailsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/view.png"))); // NOI18N
        viewDetailsBtn.setText("View Details");
        viewDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsBtnActionPerformed(evt);
            }
        });
        add(viewDetailsBtn);
        viewDetailsBtn.setBounds(850, 110, 140, 50);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(41, 67, 138));
        jLabel4.setText("Category:");
        add(jLabel4);
        jLabel4.setBounds(660, 60, 130, 16);
        add(itemCategoryTxt);
        itemCategoryTxt.setBounds(660, 80, 150, 30);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(41, 67, 138));
        jLabel5.setText("Item Price:");
        add(jLabel5);
        jLabel5.setBounds(480, 60, 130, 16);
        add(itemPriceTxt);
        itemPriceTxt.setBounds(480, 80, 140, 30);

        addItemBtn.setBackground(new java.awt.Color(41, 67, 138));
        addItemBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addItemBtn.setForeground(new java.awt.Color(255, 255, 255));
        addItemBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        addItemBtn.setText("Add Item");
        addItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemBtnActionPerformed(evt);
            }
        });
        add(addItemBtn);
        addItemBtn.setBounds(850, 190, 140, 50);

        itemListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Item Category", "Item Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(itemListTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(110, 140, 700, 110);

        bookOrderBtn.setBackground(new java.awt.Color(41, 67, 138));
        bookOrderBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bookOrderBtn.setForeground(new java.awt.Color(255, 255, 255));
        bookOrderBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/create.png"))); // NOI18N
        bookOrderBtn.setText("Book Order");
        bookOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookOrderBtnActionPerformed(evt);
            }
        });
        add(bookOrderBtn);
        bookOrderBtn.setBounds(850, 270, 140, 50);

        orderStatusTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "List of Items", "Total Price", "Order Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderStatusTable);

        add(jScrollPane2);
        jScrollPane2.setBounds(110, 320, 710, 110);

        jLabel6.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(41, 67, 138));
        jLabel6.setText("Food & Beverage Order Status");
        add(jLabel6);
        jLabel6.setBounds(370, 280, 250, 19);

        removeItemBtn.setBackground(new java.awt.Color(41, 67, 138));
        removeItemBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        removeItemBtn.setForeground(new java.awt.Color(255, 255, 255));
        removeItemBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        removeItemBtn.setText("Delete Item");
        removeItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemBtnActionPerformed(evt);
            }
        });
        add(removeItemBtn);
        removeItemBtn.setBounds(850, 350, 140, 50);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/food-1.jpg"))); // NOI18N
        add(jLabel7);
        jLabel7.setBounds(180, 350, 550, 380);
    }// </editor-fold>//GEN-END:initComponents

    private void viewDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsBtnActionPerformed
        // TODO add your handling code here:

        try {
            if (chooseFoodDropdown.getSelectedItem() != null) {

                String itemName = String.valueOf(chooseFoodDropdown.getSelectedItem());
                MealPlan itemDetails = network.getMealPlanDirectory().getItemByName(itemName);

                itemNameTxt.setText(itemDetails.getMealName());
                itemCategoryTxt.setText(itemDetails.getCategory());
                itemPriceTxt.setText(String.valueOf(itemDetails.getPrice()));

            } else {
                JOptionPane.showMessageDialog(this, "Choose a valid Food or Beverage item for viewing");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Choose a valid Food or Beverage item for viewing");
        }
    }//GEN-LAST:event_viewDetailsBtnActionPerformed

    private void addItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemBtnActionPerformed
        // TODO add your handling code here:

        try {

            DefaultTableModel itemListModel = (DefaultTableModel) itemListTable.getModel();

            if (chooseFoodDropdown.getSelectedItem() != null) {

                String itemName = String.valueOf(chooseFoodDropdown.getSelectedItem());
                MealPlan itemDetails = network.getMealPlanDirectory().getItemByName(itemName);

                Object[] newRow = new Object[3];
                newRow[0] = itemDetails.getMealName();
                newRow[1] = itemDetails.getCategory();
                newRow[2] = itemDetails.getPrice();

                itemListModel.addRow(newRow);
                foodOrderList.add(itemDetails);

                clearFields();

            } else {
                JOptionPane.showMessageDialog(this, "Choose a valid Food or Beverage item for adding to list");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Choose a valid Food or Beverage item for adding to list");
        }
    }//GEN-LAST:event_addItemBtnActionPerformed

    private void bookOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookOrderBtnActionPerformed
        // TODO add your handling code here:

        MealPlanWorkRequest bookFoodBev = new MealPlanWorkRequest();

        try {
            DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
            if (model.getRowCount() != 0) {

                bookFoodBev.setMealPlanDetails(foodOrderList);
                bookFoodBev.setUserId(user.getUserId());
                bookFoodBev.setStatus("Pending");

                network.getMealPlanworkreqDirectory().getMealPlanWorkRequestList().add(bookFoodBev);

                JOptionPane.showMessageDialog(this, "Food and Beverage order request sent to Manager");

                foodOrderList = new ArrayList<MealPlan>();
                populateRequestTable();

                model.setRowCount(0);
                clearFields();
                formatRows();

            } else {
                JOptionPane.showMessageDialog(this, "Choose valid Food and Beverage items for booking");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Choose valid Food and Beverage items for booking");
        }
    }//GEN-LAST:event_bookOrderBtnActionPerformed

    private void removeItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemBtnActionPerformed
        // TODO add your handling code here:

        try {
            int index = itemListTable.getSelectedRow();

            if (index < 0) {
                JOptionPane.showMessageDialog(this, "Please select a Food or Beverage item to be removed from list");
                return;
            }

            DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
            String itemName = String.valueOf(model.getValueAt(index, 0));
            MealPlan itemDetails = network.getMealPlanDirectory().getItemByName(itemName);

            model.removeRow(index);
            foodOrderList.remove(itemDetails);

            JOptionPane.showMessageDialog(this, "Food or Beverage item removed successfully from list");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a Food or Beverage item to be removed from list");
        }
    }//GEN-LAST:event_removeItemBtnActionPerformed

    private void chooseFoodDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFoodDropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chooseFoodDropdownActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItemBtn;
    private javax.swing.JButton bookOrderBtn;
    private javax.swing.JComboBox<String> chooseFoodDropdown;
    private javax.swing.JTextField itemCategoryTxt;
    private javax.swing.JTable itemListTable;
    private javax.swing.JTextField itemNameTxt;
    private javax.swing.JTextField itemPriceTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderStatusTable;
    private javax.swing.JButton removeItemBtn;
    private javax.swing.JButton viewDetailsBtn;
    // End of variables declaration//GEN-END:variables
}

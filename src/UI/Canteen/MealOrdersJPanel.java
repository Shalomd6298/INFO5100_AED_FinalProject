/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.Canteen;

import Business.Canteen.MealPlan;
import Business.Customer.CustomerBilling;
import Business.EcoSystem;
import Business.Network;
import Business.User.User;
import Business.User.UserDirectory;
import Business.WorkRequest.MealPlanWorkRequest;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;


public class MealOrdersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MealOrdersJPanel
     */
    private EcoSystem ecosystem;
    private Network network;
    private User user;
    private UserDirectory userDirectory;
    float totalPrice;
    
    public MealOrdersJPanel() {
        initComponents();
        
        this.ecosystem = EcoSystem.getInstance();
        this.network = this.ecosystem.getNetwork();
        this.userDirectory = this.network.getUserDirectory();
    }
    
    public MealOrdersJPanel(EcoSystem ecosystem, User user) {
        initComponents();
        this.setVisible(true);

        this.user = user;
        this.ecosystem = ecosystem;
        this.userDirectory = this.ecosystem.getNetwork().getUserDirectory();
        this.network = this.ecosystem.getNetwork();
        
        populateWorkRequestTable();
        formatRows();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void populateWorkRequestTable() {
        ArrayList<MealPlanWorkRequest> pendingFoodBevRequest = new ArrayList<MealPlanWorkRequest>();
        ArrayList<MealPlanWorkRequest> non_pendingFoodBevRequest = new ArrayList<MealPlanWorkRequest>();

        for (MealPlanWorkRequest foodBevWorkRequest : network.getMealPlanworkreqDirectory().getMealPlanWorkRequestList()) {
            if (foodBevWorkRequest.getStatus().equals("Pending")) {
                pendingFoodBevRequest.add(foodBevWorkRequest);
            } else {
                non_pendingFoodBevRequest.add(foodBevWorkRequest);
            }
        }

        populate_based_on_status(pendingFoodBevRequest, non_pendingFoodBevRequest);
    }

    public void populate_based_on_status(ArrayList<MealPlanWorkRequest> pendingFoodBevRequest, ArrayList<MealPlanWorkRequest> non_pendingFoodBevRequest) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        for (MealPlanWorkRequest pfbr : pendingFoodBevRequest) {
            ArrayList<String> foodItemNames = new ArrayList<String>();
            long foodItemsTotalPrice = 0;
            for (MealPlan fb : pfbr.getMealPlanDetails()) {
                foodItemNames.add(fb.getMealName());
                foodItemsTotalPrice += fb.getPrice();
            }
            totalPrice = foodItemsTotalPrice;
            
            Object[] newRow = new Object[4];
            newRow[0] = pfbr;
            newRow[1] = foodItemNames.toString().replace("[", "").replace("]", "");
            newRow[2] = foodItemsTotalPrice;
            newRow[3] = pfbr.getStatus();
            model.addRow(newRow);
        }

        DefaultTableModel modelNon_Pending = (DefaultTableModel) jTable2.getModel();
        modelNon_Pending.setRowCount(0);

        for (MealPlanWorkRequest pfbr : non_pendingFoodBevRequest) {
            ArrayList<String> foodItemNames = new ArrayList<String>();
            long foodItemsTotalPrice = 0;
            for (MealPlan fb : pfbr.getMealPlanDetails()) {
                foodItemNames.add(fb.getMealName());
                foodItemsTotalPrice += fb.getPrice();
            }
            Object[] newRow = new Object[4];
            newRow[0] = pfbr;
            newRow[1] = foodItemNames.toString().replace("[", "").replace("]", "");
            newRow[2] = foodItemsTotalPrice;
            newRow[3] = pfbr.getStatus();
            modelNon_Pending.addRow(newRow);
        }
    }

    void updateWorkRequestStatus(MealPlanWorkRequest selectedFoodBevWorkRequest, String status) {
        selectedFoodBevWorkRequest.setStatus(status);
        int index = 0;
        for (MealPlanWorkRequest fbr : network.getMealPlanworkreqDirectory().getMealPlanWorkRequestList()) {
            if (fbr.getUserId().equals(selectedFoodBevWorkRequest.getUserId())) {
                network.getMealPlanworkreqDirectory().updateMealWorkRequest(fbr, index);;
                break;
            }
            index++;
        }
    }

    private void formatRows() {

        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

        jTable2.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                String status = String.valueOf(model.getValueAt(row, 3));
                c.setBackground(status.equals("Pending") ? Color.WHITE : status.equals("Approved") ? Color.GREEN : Color.RED);
                return c;
            }
        });

    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnApprove = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setForeground(new java.awt.Color(41, 67, 138));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "UserId", "Item Details", "Total Price", "Status"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, 933, 130));

        btnApprove.setBackground(new java.awt.Color(41, 67, 138));
        btnApprove.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnApprove.setForeground(new java.awt.Color(255, 255, 255));
        btnApprove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/accept.png"))); // NOI18N
        btnApprove.setText(" Approve");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });
        add(btnApprove, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 230, 110, 40));

        btnReject.setBackground(new java.awt.Color(41, 67, 138));
        btnReject.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnReject.setForeground(new java.awt.Color(255, 255, 255));
        btnReject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.png"))); // NOI18N
        btnReject.setText(" Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });
        add(btnReject, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 320, 110, 40));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "UserId", "Item Details", "Total Price", "Status"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 510, 933, 140));

        jLabel1.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(41, 67, 138));
        jLabel1.setText("Customers Orders");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 30, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/mealOrders.jpg"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 120, 580, 460));
    }// </editor-fold>//GEN-END:initComponents

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // TODO add your handling code here:
        try {
            int selectedRowIndex = jTable1.getSelectedRow();
            if (selectedRowIndex < 0) {
                JOptionPane.showMessageDialog(this, "Please select a row to approve.");
                return;
            }
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            MealPlanWorkRequest selectedFoodBevWorkRequest = (MealPlanWorkRequest) model.getValueAt(selectedRowIndex, 0);
            updateWorkRequestStatus(selectedFoodBevWorkRequest, "Approved");
            
            CustomerBilling cb = new CustomerBilling();
            cb.setUserId(selectedFoodBevWorkRequest.getUserId());
            cb.setFacilityUsed("Canteen Meal Plans");
            cb.setPrice(totalPrice);
            network.getCustomerbillingdirectory().addCustomerBilling(cb);
            User getUser = network.getUserDirectory().getUserById(selectedFoodBevWorkRequest.getUserId());
            //new EmailNotification().SendEmailOfNotification(getUser, "Canteen");

            JOptionPane.showMessageDialog(this, "Request approved successfully and email notification sent");
            populateWorkRequestTable();
            formatRows();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
        try {
            int selectedRowIndex = jTable1.getSelectedRow();
            if (selectedRowIndex < 0) {
                JOptionPane.showMessageDialog(this, "Please select a row to reject.");
                return;
            }
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            MealPlanWorkRequest selectedFoodBevWorkRequest = (MealPlanWorkRequest) model.getValueAt(selectedRowIndex, 0);
            updateWorkRequestStatus(selectedFoodBevWorkRequest, "Rejected");
            JOptionPane.showMessageDialog(this, "Order rejected successfully");
            populateWorkRequestTable();
            formatRows();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_btnRejectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnReject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
